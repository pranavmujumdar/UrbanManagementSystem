/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CitizenRole;


import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.Organization.Type;
import Business.Organization.TrafficCopOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.PharmacyWorkRequest;
import Business.WorkQueue.TrafficWorkRequest;

import java.awt.CardLayout;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;

import com.dropbox.core.DbxDownloader;
import com.dropbox.core.DbxException;
import com.dropbox.core.DbxRequestConfig;
import com.dropbox.core.v2.DbxClientV2;
import com.dropbox.core.v2.files.FileMetadata;
import com.dropbox.core.v2.files.ListFolderResult;
import com.dropbox.core.v2.files.Metadata;
import com.dropbox.core.v2.users.FullAccount;
import com.google.common.io.Files;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.IOException;

/**
 *
 * @author raunak
 */
public class RequestPoliceJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Organization organization;
    private String type;
    private String imagePath;
    private static final String ALPHA_NUMERIC_STRING = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    /**
     * Creates new form RequestLabTestJPanel
     */
    public RequestPoliceJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, String type) {
        initComponents();
        
        
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.type = type;
        valueLabel.setText(type);
        //messageTA.append(enterprise.getOrganizationDirectory().getOrganizationList().get(0).getName());
        //valueLabel.setText(enterprise.getName());
    }
    
    public static String getExtensionByGuava(String filename) {
    return Files.getFileExtension(filename);
}
    

    public static String upload(String path) throws DbxException, IOException {
        // Create Dropbox client
        DbxRequestConfig config = new DbxRequestConfig("sample", "en_US");
        DbxClientV2 client = new DbxClientV2(config, EcoSystem.ACCESS_TOKEN);

        // Get current account info
        //FullAccount account = client.users().getCurrentAccount();
        //System.out.println(account.getName().getDisplayName());

        // Get files and folder metadata from Dropbox root directory
        /*ListFolderResult result = client.files().listFolder("/jaadu/");
        
        while (true) {
            for (Metadata metadata : result.getEntries()) {
                System.out.println(metadata.getPathLower());
            }

            if (!result.getHasMore()) {
                break;
            }

            result = client.files().listFolderContinue(result.getCursor());
        }*/ 

        // Upload "test.txt" to Dropbox
        String root = "/jaadu/";
        String randomName = randomAlphaNumeric(10);
        
        root = root + randomName + "." + getExtensionByGuava(path);
        
        try (InputStream in = new FileInputStream(path)) {
            FileMetadata metadata = client.files().uploadBuilder(root)
                .uploadAndFinish(in);
        }
        
        return root;
        /*
        DbxDownloader<FileMetadata> downloader = client.files().download("/jaadu/wp.jpg");
        try {
            FileOutputStream out = new FileOutputStream("awesome.jpg");
            downloader.download(out);
            out.close();
        } catch (DbxException ex) {
            System.out.println(ex.getMessage());
        }
        */ 
    }

    public static String randomAlphaNumeric(int count) {

    StringBuilder builder = new StringBuilder();

    while (count-- != 0) {

    int character = (int)(Math.random()*ALPHA_NUMERIC_STRING.length());

    builder.append(ALPHA_NUMERIC_STRING.charAt(character));

    }

    return builder.toString();

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        requestTestJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        valueLabel = new javax.swing.JLabel();
        enterpriseLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTA = new javax.swing.JTextArea();
        imageUploadBtn = new javax.swing.JButton();
        fileLocationLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(254, 254, 254));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        requestTestJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ic_send_black_24dp.png"))); // NOI18N
        requestTestJButton.setText("Raise Complaint");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });
        add(requestTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 530, -1, -1));

        jLabel1.setText("Complaint");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 250, 100, -1));

        backJButton.setFont(new java.awt.Font("Montserrat", 0, 15)); // NOI18N
        backJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ic_arrow_back_black_24dp.png"))); // NOI18N
        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 530, -1, -1));

        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 210, 130, -1));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("City");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 210, 120, 30));

        messageTA.setColumns(20);
        messageTA.setRows(5);
        jScrollPane1.setViewportView(messageTA);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 250, 250, 140));

        imageUploadBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ic_file_upload_black_24dp.png"))); // NOI18N
        imageUploadBtn.setText("Attach Image");
        imageUploadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageUploadBtnActionPerformed(evt);
            }
        });
        add(imageUploadBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 430, 170, -1));
        add(fileLocationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 470, 320, 30));

        jLabel2.setFont(new java.awt.Font("Montserrat", 0, 48)); // NOI18N
        jLabel2.setText("Raise A complaint for Law and Order Issues");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed
      
        String location = ""; 
        try
        {
            location = upload(fileLocationLabel.getText());
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Invalid! Check the image and try again");
        }
        
        String message = messageTA.getText();
         if(!messageTA.getText().isEmpty())
         {
        TrafficWorkRequest request = new TrafficWorkRequest();
        request.setMessage(message);
        request.setSender(userAccount);
        request.setStatus("Sent");
        request.setImgLocation(location);
        
        Organization org = null;
        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (o instanceof TrafficCopOrganization){
                org = o;
                break;
            }
        }
        
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);
        }
         }
         else
         {
             JOptionPane.showMessageDialog(null,"Message cannot be empty");
         }
        
        
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CitizenWorkAreaJPanel dwjp = (CitizenWorkAreaJPanel) component;
        dwjp.populateRequestTable();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_backJButtonActionPerformed

    private void imageUploadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageUploadBtnActionPerformed

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter( "JPG, GIF & PNG files", "jpg", "gif", "png" );
        chooser.setFileFilter(filter);

        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {

            imagePath = chooser.getSelectedFile().getAbsolutePath();

            System.out.println("You selected : " + chooser.getSelectedFile().getName());
            System.out.println(imagePath);
            fileLocationLabel.setText(imagePath);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_imageUploadBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel fileLocationLabel;
    private javax.swing.JButton imageUploadBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea messageTA;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
