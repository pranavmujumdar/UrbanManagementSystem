/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.InventoryMgr;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.MunicipalEnterprise;
import Business.Inventory.InventoryItem;
import Business.Network.Network;
import Business.Organization.InventoryOrganization;
import Business.Organization.WaterManagementOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FinanceWorkRequest;
import Business.WorkQueue.InventoryWorkRequest;
import Business.WorkQueue.WaterSupplyWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.WaterSupplyEngineerRole.ViewDetailsAreaJPanel;

/**
 *
 * @author pranav
 */
public class InventoryMgrWorkAreaJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private InventoryOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    
    private EcoSystem system;
    private Network network;
    MunicipalEnterprise mp;
    /**
     * Creates new form InventoryMgrWorkAreaJPanel
     */
    public InventoryMgrWorkAreaJPanel() {
        initComponents();
    }

    public InventoryMgrWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, InventoryOrganization organization, Enterprise enterprise, EcoSystem system, Network network) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.network = network;
        System.out.println(network.getEnterpriseDirectory().getEnterpriseList().size()+" ---- EnterpriseList size");
        this.mp = (MunicipalEnterprise) enterprise;
        
        this.system = system;
        this.network = network;
        
        greetingsTxt.setText("Hi "+ account.getUsername() +"!");
        populateTable();
        populateInventoryTable();
              
    }
    
    public void populateInventoryTable()
    {
        DefaultTableModel model = (DefaultTableModel)inventoryTable.getModel();
        
        model.setRowCount(0);
        
        System.out.println(enterprise.getInventoryDirectoryEnterpriseLevel().getInventoryList().size()+" this is the size");
        
        try
        {
        for(InventoryItem item : enterprise.getInventoryDirectoryEnterpriseLevel().getInventoryList()){
            Object[] row = new Object[4];
            
            row[0] = item;
            row[1] = item.getItemType();
            row[2] = item.getQuantity();
            row[3] = item.getPrice();
            
            model.addRow(row);
        }
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        try
        {
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[4];
            InventoryWorkRequest req = (InventoryWorkRequest) request;
            row[0] = request;
            //row[0] = req.getItemsRequired().get(0);
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();
            
            model.addRow(row);
        }}
        catch(Exception e)
        {
            System.out.println("Cant populate table");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        greetingsTxt = new javax.swing.JLabel();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        btnViewDetails = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        myRequestsBtn = new javax.swing.JButton();
        financeRequestBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(251, 248, 242));

        greetingsTxt.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        greetingsTxt.setText("Hi ");

        assignJButton.setBackground(new java.awt.Color(108, 180, 242));
        assignJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ic_mode_edit_black_24dp.png"))); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        processJButton.setBackground(new java.awt.Color(151, 246, 142));
        processJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ic_check_black_24dp.png"))); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setBackground(new java.awt.Color(254, 254, 254));
        refreshJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ic_refresh_black_24dp.png"))); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        btnViewDetails.setBackground(new java.awt.Color(254, 254, 254));
        btnViewDetails.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnViewDetails.setText("View Details");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        jButton1.setBackground(new java.awt.Color(254, 254, 254));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Add Inventory");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Type", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(inventoryTable);

        jSeparator1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        myRequestsBtn.setBackground(new java.awt.Color(254, 254, 254));
        myRequestsBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        myRequestsBtn.setText("View My Requests");
        myRequestsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myRequestsBtnActionPerformed(evt);
            }
        });

        financeRequestBtn.setBackground(new java.awt.Color(254, 254, 254));
        financeRequestBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        financeRequestBtn.setText("Send request to finance");
        financeRequestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                financeRequestBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(assignJButton)
                                .addGap(176, 176, 176)
                                .addComponent(processJButton)
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(greetingsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refreshJButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnViewDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(financeRequestBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(myRequestsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greetingsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton)
                    .addComponent(processJButton))
                .addGap(89, 89, 89)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(btnViewDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(financeRequestBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(myRequestsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        //InventoryWorkRequest request = (InventoryWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
//        request.setReceiver(userAccount);
//        request.setAssigned(userAccount);
//        request.setStatus("In Progress");
//        populateTable();
//        

       /* if(userAccount.getWorkQueue().getProcessingWorkList().size()>0)
        {
            JOptionPane.showMessageDialog(null, "Please process your current assignment before taking on a new request.");
            return;
        }*/
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }

        InventoryWorkRequest request = (InventoryWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        if(request.getReceiver()!=null)
        {
            if(request.getReceiver()==userAccount)
            {
                JOptionPane.showMessageDialog(null, "The selected request is already assigned to you");
                return;
            }
            else
            {
                JOptionPane.showMessageDialog(null, "The selected request is assigned to someone else.");
                return;
            }
        }

        else if(userAccount.getWorkQueue().getProcessingWorkList().size()>0)
        {
            JOptionPane.showMessageDialog(null, "Please process your current assignment before taking on a new request.");
            System.out.println("current assign size "+ userAccount.getWorkQueue().getProcessingWorkList().size());
            return;
        }
        else {
            request.setReceiver(userAccount);
            request.setStatus("Pending");
            userAccount.getWorkQueue().getProcessingWorkList().add(request);
            populateTable();

        }
        
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }

        InventoryWorkRequest request = (InventoryWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        
        WorkRequest next = null;
        
        if(request.getReceiver()!=null)
        {
             if(request.getReceiver()==userAccount)
            {
                if(request.getDependencies().size()!=0)
                    {
                        next = request.getDependencies().get(0);
                        if(next.getStatus().equals("Completed") || (next.getStatus().equals("Declined")))
                        {
                            request.setStatus("Completed");
                            request.setReceiver(userAccount);
                            String text = JOptionPane.showInputDialog(null, "Enter comments");

                            request.setResult2(text);

                            SimpleDateFormat dtf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                            Date now = new Date();
                            System.out.println(dtf.format(now));
                            request.setResolveDate(now);

                            next = request.getParent();
                            next.setStatus("Completed");
                            
                            userAccount.getWorkQueue().getProcessingWorkList().remove(request);
                            

                            JOptionPane.showMessageDialog(null, "Request processed successfully");
                            return;
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Request cannot be processed right now.");
                            return;
                        }
                    }
                else 
                {
                            request.setStatus("Completed");
                            request.setReceiver(userAccount);
                            String text = JOptionPane.showInputDialog(null, "Enter comments");

                            request.setResult2(text);

                            next = request.getParent();
                            next.setStatus("Completed");
                            
                            SimpleDateFormat dtf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                            Date now = new Date();
                            System.out.println(dtf.format(now));
                            request.setResolveDate(now);

                            userAccount.getWorkQueue().getProcessingWorkList().remove(request);

                            JOptionPane.showMessageDialog(null, "Request processededd successfully");
                            return;
                }
            }
             else
                 JOptionPane.showMessageDialog(null, "This request is assigned to another user");
        }
        else
        {
                            
                            String text = JOptionPane.showInputDialog(null, "Enter comments");

                            request.setResult2(text);
                            request.setStatus("Completed");
                            request.setReceiver(userAccount);
                            
                            next = request.getParent();
                            next.setStatus("Completed");
                            
                            SimpleDateFormat dtf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                            Date now = new Date();
                            System.out.println(dtf.format(now));
                            request.setResolveDate(now);

                            userAccount.getWorkQueue().getProcessingWorkList().remove(request);

                            
                            JOptionPane.showMessageDialog(null, "Request processededd successfully");
                            return;
        }
        populateTable();
        populateInventoryTable();
        
                 

    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
        populateInventoryTable();   
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        // TODO add your handling code here:

        int selectedRow = workRequestJTable.getSelectedRow();
        if(selectedRow >= 0){
            InventoryWorkRequest request = (InventoryWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
            ViewRequestDetailsJPanel ViewDetailsAreaJPanel = new ViewRequestDetailsJPanel(userProcessContainer, request, enterprise, userAccount, system);
            userProcessContainer.add("ViewDetailsRequestJPanel", ViewDetailsAreaJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);

        }
        else{
            JOptionPane.showMessageDialog(null, "Select a row!", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnViewDetailsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
            
            AddInventoryJPanel jp = new AddInventoryJPanel(userProcessContainer, enterprise);
            userProcessContainer.add("processWorkRequestJPanel", jp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
                
    }//GEN-LAST:event_jButton1ActionPerformed

    private void myRequestsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myRequestsBtnActionPerformed
       
        ViewMyRequests myRequests = new ViewMyRequests(userProcessContainer, userAccount);
        userProcessContainer.add("processWorkRequestJPanel", myRequests);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);        // TODO add your handling code here:
        
    }//GEN-LAST:event_myRequestsBtnActionPerformed

    private void financeRequestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_financeRequestBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please sekect a row");
            return;
        }

        if(userAccount.getWorkQueue().getProcessingWorkList().size()!=0)
        {
            JOptionPane.showMessageDialog(null, "Finish off with your current assignments in order to assign a new one");
            return;
        }
        
        InventoryWorkRequest request = (InventoryWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);        
        
        //System.out.println("Request before sending to JPanel " + request.getSender().getUsername());

        RequestFinanceTeamJPanel processWorkRequestJPanel = new RequestFinanceTeamJPanel(userProcessContainer, userAccount, organization, enterprise, system, request);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
        
    }//GEN-LAST:event_financeRequestBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JButton financeRequestBtn;
    private javax.swing.JLabel greetingsTxt;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton myRequestsBtn;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
